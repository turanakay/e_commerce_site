{"version":3,"file":"primeng-tristatecheckbox.js","sources":["../../src/app/components/tristatecheckbox/tristatecheckbox.ts","../../src/app/components/tristatecheckbox/primeng-tristatecheckbox.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;MAIa,+BAA+B,GAAQ;AACnD,IAAC,OAAO,EAAE,iBAAiB;AAC3B,IAAC,WAAW,EAAE,UAAU,CAAC,MAAM,gBAAgB,CAAC;AAChD,IAAC,KAAK,EAAE,IAAI;AACZ,EAAC;AAEF,MAoBa,gBAAgB;AAAI,IAE7B,YAAoB,EAAqB;AAC7C,QADwB,OAAE,GAAF,EAAE,CAAmB;AAAE,QAoBlC,qBAAgB,GAAW,aAAa,CAAC;AAEtD,QAAa,sBAAiB,GAAW,aAAa,CAAC;AAEvD,QAAc,aAAQ,GAAsB,IAAI,YAAY,EAAE,CAAC;AAE/D,QAII,kBAAa,GAAa,SAAQ,CAAC;AAEvC,QAAI,mBAAc,GAAa,SAAQ,CAAC;AAExC,KAlCiD;AAEjD,IAgCI,OAAO,CAAC,KAAY,EAAE,KAAuB;AAChD,QAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAC7C,YAAW,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,YAAW,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AAC/B,YAAW,KAAK,CAAC,KAAK,EAAE,CAAC;AACzB,SAAQ;AACR,KAAI;AAEL,IAAI,SAAS,CAAC,KAAoB;AACjC,QAAO,IAAI,KAAK,CAAC,OAAO,IAAI,EAAE,EAAE;AAChC,YAAW,KAAK,CAAC,cAAc,EAAE,CAAC;AAClC,SAAQ;AACR,KAAI;AAEL,IAAI,OAAO,CAAC,KAAoB;AAC/B,QAAO,IAAI,KAAK,CAAC,OAAO,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAClD,YAAW,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9B,YAAW,KAAK,CAAC,cAAc,EAAE,CAAC;AAClC,SAAQ;AACR,KAAI;AAEL,IAAI,MAAM,CAAC,KAAY;AACtB,QAAO,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,SAAS;AACxD,YAAW,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AAC7B,aAAY,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;AAClC,YAAW,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AAC9B,aAAY,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK;AACnC,YAAW,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AAE9B,QAAQ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtC,QAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;AAC1B,YAAW,aAAa,EAAE,KAAK;AAC/B,YAAW,KAAK,EAAE,IAAI,CAAC,KAAK;AAC5B,SAAQ,CAAC,CAAA;AACT,KAAI;AAEL,IAAI,OAAO;AACV,QAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AAC3B,KAAI;AAEL,IAAI,MAAM;AACT,QAAO,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AAC5B,QAAO,IAAI,CAAC,cAAc,EAAE,CAAC;AAC7B,KAAI;AAEL,IAAI,gBAAgB,CAAC,EAAY;AAAK,QAC9B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAC/B,KAAI;AAEL,IAAI,iBAAiB,CAAC,EAAY;AAAK,QAC/B,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AAChC,KAAI;AAEL,IAAI,UAAU,CAAC,KAAU;AAAK,QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AAC1B,QAAO,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;AAC9B,KAAI;AAEL,IAAI,gBAAgB,CAAC,QAAiB;AAAK,QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAChC,QAAO,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;AAC9B,KAAI;AACJ;8CAtHA,SAAS,SAAC,mBACP,QAAQ,EAAE,oBAAoB,mBAC9B,QAAQ,EAAE;;;;;mCAaT;KACD,SAAS,EAAE,CAAC,+BAA+B,CAAC,mBAC5C,eAAe,EAAE,uBAAuB,CAAC,MAAM,mBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI,eACxC;;;;;;;;;;;;;;;;;;;;;;4GACK;AAAE;AAA2C,YA9Ba,iBAAiB;AAAI;AAAI;AAAqC,uBAkCzH,KAAK;AAAM,mBAEX,KAAK;AAAM,6BAEX,KAAK;AAAM,uBAEX,KAAK;AAAM,sBAEX,KAAK;AAAM,oBAEX,KAAK;AAAM,yBAEX,KAAK;AAAM,oBAEX,KAAK;AAAM,uBAEX,KAAK;AAAM,+BAEX,KAAK;AAAM,gCAEX,KAAK;AAAM,uBAEX,MAAM;AAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAE,MA+EP,sBAAsB;AAAI;oDALtC,QAAQ,SAAC,mBACN,OAAO,EAAE,CAAC,YAAY,CAAC;QACvB,OAAO,EAAE,CAAC,gBAAgB,CAAC,mBAC3B,YAAY,EAAE,CAAC,gBAAgB,CAAC;YACnC;;;;;;;;;0BACK;AAAE;ACvIR;AACC;AACC;AAEA;AAAE;AACyD","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-triStateCheckbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\" inputmode=\"none\">\n            </div>\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"value==true ? checkboxTrueIcon : checkboxFalseIcon\"></span>\n            </div>\n        </div>\n        <label class=\"p-checkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TriStateCheckbox implements ControlValueAccessor  {\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    @Input() disabled: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() label: string;\n\n    @Input() readonly: boolean;\n\n    @Input() checkboxTrueIcon: string = 'pi pi-check';\n\n    @Input() checkboxFalseIcon: string = 'pi pi-times';\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    focused: boolean;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    onClick(event: Event, input: HTMLInputElement) {\n        if (!this.disabled && !this.readonly) {\n            this.toggle(event);\n            this.focused = true;\n            input.focus();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n\n    onKeyup(event: KeyboardEvent) {\n        if (event.keyCode == 32 && !this.readonly) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n\n    toggle(event: Event) {\n        if (this.value == null || this.value == undefined)\n            this.value = true;\n        else if (this.value == true)\n            this.value = false;\n        else if (this.value == false)\n            this.value = null;\n\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        })\n    }\n\n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    setDisabledState(disabled: boolean): void {\n        this.disabled = disabled;\n        this.cd.markForCheck();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [TriStateCheckbox],\n    declarations: [TriStateCheckbox]\n})\nexport class TriStateCheckboxModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}